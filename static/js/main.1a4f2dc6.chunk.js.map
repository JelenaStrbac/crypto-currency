{"version":3,"sources":["utils/preloadImage.ts","components/Header.tsx","store/slices/cryptoSlice.ts","store/slices/authSlice.ts","store/store.ts","containers/Home.tsx","assets/profile.jpg","containers/Profile.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["source","Header","isAuthenticated","handleLogin","Navbar","bg","variant","Brand","Nav","className","exact","to","Link","Button","onClick","criptoSlice","createSlice","name","initialState","BTCUSD","BTCEUR","ETHUSD","ETHEUR","EOSUSD","reducers","updateCrypto","state","action","payload","currency","currencyDetails","actions","authSlice","authenticateUser","store","configureStore","reducer","auth","authReducer","crypto","cryptoReducer","useAppDispatch","useDispatch","formatNumber","num","options","Intl","NumberFormat","format","criptoSymbols","Home","dispatch","useSelector","useEffect","ws","WebSocket","channelIds","onopen","forEach","el","send","JSON","stringify","event","channel","symbol","onmessage","msg","data","parse","Array","isArray","dailyChange","style","signDisplay","minimumFractionDigits","maximumFractionDigits","volume","lastPrice","getDataForEachCurrency","chanId","pair","close","renderHomeScreen","Spinner","data-testid","animation","Object","values","every","Table","bordered","hover","responsive","width","textAlign","keys","map","i","key","fontWeight","display","justifyContent","alignItems","ProfileImg","Image","src","Profile","useState","avatar","setAvatar","buttonColor","setButtonColor","Card","Img","Body","Title","Text","prevAvatar","prevColor","App","basename","process","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a4f2dc6.chunk.js","sourcesContent":["export const preloadImage = (source: string) => {\n  const img = new Image();\n  img.src = source;\n};\n","import { FC } from \"react\";\nimport { Navbar, Nav, Button } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\ntype Props = {\n  isAuthenticated: boolean;\n  handleLogin: () => void;\n};\n\nconst Header: FC<Props> = ({ isAuthenticated, handleLogin }) => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand>Navbar</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <LinkContainer exact to=\"/\">\n          <Nav.Link>Home</Nav.Link>\n        </LinkContainer>\n        {isAuthenticated ? (\n          <LinkContainer to=\"/profile\">\n            <Nav.Link>Profile</Nav.Link>\n          </LinkContainer>\n        ) : null}\n      </Nav>\n\n      {!isAuthenticated ? (\n        <Button variant=\"primary\" onClick={handleLogin}>\n          Login\n        </Button>\n      ) : null}\n    </Navbar>\n  );\n};\n\nexport default Header;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { Currencies, CurrencyDetails, RootState } from \"../../types/index\";\n\nconst initialState: RootState[\"crypto\"] = {\n  BTCUSD: null,\n  BTCEUR: null,\n  ETHUSD: null,\n  ETHEUR: null,\n  EOSUSD: null,\n};\n\nconst criptoSlice = createSlice({\n  name: \"cripto\",\n  initialState,\n  reducers: {\n    updateCrypto(\n      state,\n      action: PayloadAction<{\n        currency: Currencies;\n        currencyDetails: CurrencyDetails;\n      }>\n    ) {\n      state[action.payload.currency] = action.payload.currencyDetails;\n    },\n  },\n});\n\nexport const { updateCrypto } = criptoSlice.actions;\n\nexport default criptoSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../types/index\";\n\nconst initialState: RootState[\"auth\"] = {\n  isAuthenticated: false,\n};\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    authenticateUser(state) {\n      state.isAuthenticated = true;\n    },\n  },\n});\n\nexport const { authenticateUser } = authSlice.actions;\n\nexport default authSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\n\nimport authReducer from \"./slices/authSlice\";\nimport cryptoReducer from \"./slices/cryptoSlice\";\n\nconst store = configureStore({\n  reducer: {\n    auth: authReducer,\n    crypto: cryptoReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport default store;\n","import { useEffect } from \"react\";\nimport { Spinner, Table } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { updateCrypto } from \"../store/slices/cryptoSlice\";\nimport { useAppDispatch } from \"../store/store\";\nimport { Currencies, RootState, ResponseTypes } from \"../types\";\n\nconst formatNumber = (num: number, options?: Intl.NumberFormatOptions) =>\n  new Intl.NumberFormat(\"en-US\", options).format(num);\n\nconst getDataForEachCurrency = (data: number[]) => {\n  const dailyChange = formatNumber(data[5], {\n    style: \"percent\",\n    signDisplay: \"always\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n  const volume = formatNumber(data[7], { maximumFractionDigits: 0 });\n  const lastPrice = formatNumber(data[6], {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n\n  return { dailyChange, volume, lastPrice };\n};\n\nconst criptoSymbols: Currencies[] = [\n  \"BTCUSD\",\n  \"BTCEUR\",\n  \"ETHUSD\",\n  \"ETHEUR\",\n  \"EOSUSD\",\n];\n\nconst Home = () => {\n  const dispatch = useAppDispatch();\n  const { crypto } = useSelector((state: RootState) => state);\n\n  useEffect(() => {\n    const ws = new WebSocket(\"wss://api-pub.bitfinex.com/ws/2\");\n\n    const channelIds: { [key: number]: Currencies } = {};\n\n    ws.onopen = () => {\n      criptoSymbols.forEach((el) => {\n        ws.send(\n          JSON.stringify({\n            event: \"subscribe\",\n            channel: \"ticker\",\n            symbol: `t${el}`,\n          })\n        );\n      });\n    };\n\n    ws.onmessage = (msg) => {\n      const data: ResponseTypes = JSON.parse(msg.data);\n\n      if (!Array.isArray(data)) {\n        channelIds[data.chanId] = data.pair;\n      } else {\n        const currency = channelIds[data[0]];\n\n        // heart-beating -> if there is no activity in the channel for 15 seconds\n        if (data[1] !== \"hb\") {\n          const currencyDetails = getDataForEachCurrency(data[1]);\n\n          dispatch(updateCrypto({ currency, currencyDetails }));\n        }\n      }\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, [dispatch]);\n\n  let renderHomeScreen = (\n    <Spinner data-testid=\"spinner\" animation=\"border\" variant=\"primary\" />\n  );\n\n  if (Object.values(Object.values(crypto)).every((el) => el !== null)) {\n    renderHomeScreen = (\n      <Table bordered hover responsive>\n        <thead>\n          <tr>\n            <th style={{ width: \"5%\", textAlign: \"center\" }}>#</th>\n            <th\n              style={{\n                width: \"35%\",\n              }}\n            >\n              Symbol\n            </th>\n            <th style={{ width: \"20%\" }}>Daily change</th>\n            <th style={{ width: \"20%\" }}>Volume</th>\n            <th style={{ width: \"20%\" }}>Last price</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(crypto).map((el, i) => {\n            const key = el as Currencies;\n            return (\n              <tr key={i}>\n                <td style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\n                  {i + 1}\n                </td>\n                <td>{el}</td>\n                <td>{crypto[key]?.[\"dailyChange\"]}</td>\n                <td>{crypto[key]?.[\"volume\"]}</td>\n                <td>{crypto[key]?.[\"lastPrice\"]}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n  }\n\n  return (\n    <div\n      className=\"pt-4 px-2 p-md-5\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      {renderHomeScreen}\n    </div>\n  );\n};\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/profile.ca184021.jpg\";","import { useState } from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\n\nimport { preloadImage } from \"../utils/preloadImage\";\nimport ProfileImg from \"../assets/profile.jpg\";\n\npreloadImage(ProfileImg);\n\nconst Profile = () => {\n  const [avatar, setAvatar] = useState(ProfileImg);\n  const [buttonColor, setButtonColor] = useState(\"primary\");\n\n  const toggleAvatarAndButton = () => {\n    setAvatar((prevAvatar) =>\n      prevAvatar === ProfileImg\n        ? \"https://api.hello-avatar.com/adorables/285/strbac.jelena.js@gmail.com\"\n        : ProfileImg\n    );\n\n    setButtonColor((prevColor) =>\n      prevColor === \"primary\" ? \"info\" : \"primary\"\n    );\n  };\n\n  return (\n    <div className=\"pt-4 px-4 p-md-5\">\n      <Card style={{ width: \"18rem\" }}>\n        <Card.Img variant=\"top\" src={avatar} />\n        <Card.Body>\n          <Card.Title>Jelena Strbac</Card.Title>\n          <Card.Text>strbac.jelena.js@gmail.com</Card.Text>\n          <Card.Text>https://github.com/JelenaStrbac</Card.Text>\n          <Button variant={buttonColor} onClick={toggleAvatarAndButton}>\n            Toggle avatar\n          </Button>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default Profile;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport Header from \"./components/Header\";\nimport Home from \"./containers/Home\";\nimport Profile from \"./containers/Profile\";\nimport { RootState } from \"./types\";\nimport { authenticateUser } from \"./store/slices/authSlice\";\nimport { useAppDispatch } from \"./store/store\";\n\nconst App = () => {\n  const dispatch = useAppDispatch();\n  const { isAuthenticated } = useSelector((state: RootState) => state.auth);\n\n  const handleLogin = () => {\n    dispatch(authenticateUser());\n  };\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Header isAuthenticated={isAuthenticated} handleLogin={handleLogin} />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/profile\" component={Profile} />\n      </Switch>\n      <Redirect to=\"/\" />\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}